name: pr merge

on:
  pull_request:
    types: [closed]
    branches:
      - dev
env:
  REGISTRY_NAME: apistoneteam1
  CLUSTER_NAME: apistoneteam1
  CLUSTER_RESOURCE_GROUP: APISTONE
  NAMESPACE: dev

jobs:
  test-transition-issue:
    name: Transition merge
    runs-on: ubuntu-latest
    steps:
    - name: Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASEURL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_TOKEN }}

    - name: Transition merged
      uses: atlassian/gajira-transition@master
      if: github.event.pull_request.merged == true
      with:
        issue: ${{ github.head_ref }}
        transition: "In Code Review"
        
    - name: Checking out
      uses: actions/checkout@master
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        
    - name: SonarQube Scan
      uses: kitabisa/sonarqube-action@v1.2.0
      with:
        host: ${{ secrets.SONARQUBE_HOST }}
        login: ${{ secrets.SONARQUBE_TOKEN }}
        
    - name: Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASEURL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_TOKEN }}
        
    - name: Transition to qa
      uses: atlassian/gajira-transition@master
      with:
        issue: ${{ github.head_ref }}
        transition: "Ready For QA Deployment"
    
  Kubernetes_deployment:
    needs: test-transition-issue
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - uses: actions/checkout@master
    
    # Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # Container build and push to a Azure Container registry (ACR)
    - run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/getting-started:latest
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/getting-started:latest
    
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
#     Create namespace if doesn't exist
#     - run: |
#         kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}
    
    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: manifests/deployment.yml
        
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/getting-started:latest
        imagepullsecrets: |
          ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }} 
       
