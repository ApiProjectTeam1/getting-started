name: pr merge

on:
  pull_request:
    types: [closed]
    branches:
      - dev

jobs:
  test-transition-issue:
    name: Transition merge
    runs-on: ubuntu-latest
    steps:
    - name: Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASEURL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_TOKEN }}

    - name: Transition merged
      uses: atlassian/gajira-transition@master
      if: github.event.pull_request.merged == true
      with:
        issue: ${{ github.head_ref }}
        transition: "In Code Review"
        
    - name: Checking out
      uses: actions/checkout@master
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        
    - name: SonarQube Scan
      uses: kitabisa/sonarqube-action@v1.2.0
      with:
        host: ${{ secrets.SONARQUBE_HOST }}
        login: ${{ secrets.SONARQUBE_TOKEN }}
        
    - name: Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASEURL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_TOKEN }}
        
    - name: Transition to qa
      uses: atlassian/gajira-transition@master
      with:
        issue: ${{ github.head_ref }}
        transition: "Ready For QA Deployment"
    
   
  build-docker-image:    
        needs: test-transition-issue
        runs-on: ubuntu-latest
        steps:
         -
          name: Checkout 
          uses: actions/checkout@v2
         -
          name: Login to Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}
            password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
         -
          name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
         -
          name: Build and push
          uses: docker/build-push-action@v2
          with:
            context: .
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKER_HUB_USERNAME }}/getting-started:latest
         -   
          name: Azure Kubernetes set context
          uses: Azure/aks-set-context@v1
          with:
        # Azure credentials i.e. output of `az ad sp create-for-rbac --sdk-auth`
            creds: '${{secrets.AZURE_CREDENTIALS}}'
        # Resource Group Name
            resource-group: APISTONE
        # AKS Cluster Name
            cluster-name: apistoneteam1
         -
          name: Create secret in Kubernetes cluster
          uses: Azure/k8s-create-secret@v1.1
          with:
            # Container registry url
            container-registry-url: https://index.docker.io/v1/
            # Container registry username
            container-registry-username: '${{secrets.DOCKER_HUB_USERNAME}}'
            # Container registry password
            container-registry-password:  '${{secrets.DOCKER_HUB_ACCESS_TOKEN}}'
            # Type of Kubernetes secret. For example, docker-registry or generic
            secret-type: docker-registry
            # Name of the secret. You can use this secret name in the Kubernetes YAML configuration file.
            secret-name: docker-image-pull-secret
                
         -
          name: Deploy to Kubernetes cluster
          uses: Azure/k8s-deploy@v1
          with:        
            # Path to the manifest files which will be used for deployment.
            manifests: |
              k8s/deployment.yml
            # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
            images: '${{ secrets.DOCKER_HUB_USERNAME }}/getting-started:latest'
            # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
            imagepullsecrets: docker-image-pull-secret
            # deploy/promote/reject
            action: deploy  
